class Solution {
public:
    vector<int> size;
    vector<int> parent;
    
    int find(int x){
        if(parent[x]==x){
            return x;
        }
        return find(parent[x]);
    }
    
    void unite(int x,int y){
        
        int parent_x=find(x);
        int parent_y=find(y);
        
        if(parent_x!=parent_y){
            parent[parent_x]=parent_y;
            size[parent_y] += size[parent_x];
            size[parent_x] = 0;
        }
        
        return;
    }
    
    
    int longestConsecutive(vector<int>& nums) {
        
        int n = nums.size();
        if(n < 2) return n;
        
        for(int i=0;i<n;i++){
            size.push_back(1);
            parent.push_back(i);
        }
        
        map<int,int> s;
        for(int i=0;i<n;i++){
            if(s.find(nums[i]) != s.end()) continue;
            s[nums[i]]=i;
            
            if(s.find(nums[i]-1) != s.end()){
                unite(s[nums[i]-1],i);
            }
            
            if(s.find(nums[i]+1) != s.end()){
                unite(i,s[nums[i]+1]);
            }
        }
        
        int ans =0;
        for(int i=0;i<n;i++){
            cout<<size[i]<<" ";
            ans=max(ans,size[i]);
        }
        cout<<"\n";
        
        for(int i=0;i<n;i++){
            cout<<parent[i]<<" ";
            // ans=max(ans,size[i]);
        }
        cout<<"\n";
        return ans;
    }
};