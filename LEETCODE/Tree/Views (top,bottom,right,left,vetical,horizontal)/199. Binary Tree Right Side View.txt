/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> temp;
    void level_order(TreeNode *root,vector<int> &v){
        if(root == NULL) return;
        
        queue<TreeNode *> q;
        q.push(root);q.push(NULL);
        
        while(!q.empty()){
            TreeNode *fr = q.front();
            q.pop();
            
            if(fr!=NULL){
                cout<<fr->val<<" ";
                temp.push_back(fr->val);
                
                if(fr->left){
                    q.push(fr->left);
                }    
                
                if(fr->right){
                    q.push(fr->right);
                }
 
            }
            else{
                v.push_back(temp[temp.size()-1]);
                temp.clear();
                cout<<"\n";
                if(q.empty()){
                    break;
                }    
                else{
                    q.push(NULL);
                }
            }
        }
        
        return;
    }
    
    vector<int> rightSideView(TreeNode* root) {
        
        vector<int> v;
        level_order(root,v);
        
        return v;
    }
};