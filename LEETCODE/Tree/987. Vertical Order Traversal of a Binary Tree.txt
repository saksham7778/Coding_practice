/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        vector<vector<int>> ans;
        vector<int> temp;
        
        queue<pair<TreeNode *,int>> q;
        q.push({root,0});
        
        map<int,vector<int>> m;    
        while(!q.empty()){
        
            pair<TreeNode *,int> fr = q.front();
            q.pop();
            cout<<fr.first->val<<" *";
            m[fr.second].push_back(fr.first->val);

            if(fr.first->left){
                q.push({fr.first->left , fr.second-1});
            }

            if(fr.first->right){
                q.push({fr.first->right , fr.second+1});
            }
           
        }
        
        for(auto it=m.begin();it!=m.end();it++){
            int size = it->second.size();
            // sort(it->second.begin(),it->second.end());
            for(int j=0;j<size;j++){
                temp.push_back(it->second[j]);
            }
            ans.push_back(temp);
            temp.clear();
        }
        
        return ans;
    }
};