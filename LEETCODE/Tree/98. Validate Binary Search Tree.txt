/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    class temp{
      public:
        long maxi;long mini;bool isbst;
    };
    
    temp helper(TreeNode *root){
        
        if(root ==NULL){
            temp obj;
            obj.maxi = LONG_MIN;obj.mini=LONG_MAX; obj.isbst=true;
            return obj;
        }
        
        temp op1 = helper(root->left);
        temp op2 = helper(root->right);
        
        
        long long cur_maxi;
        if(root->val>(op2.maxi)) cur_maxi = root->val;
        else cur_maxi = op2.maxi;
        
        long long cur_mini;
        if(root->val<(op1.mini)) cur_mini = root->val;
        else cur_mini = op1.mini;
        
        bool cur_isbst = false;
        if(op1.isbst && op2.isbst && root->val > op1.maxi && root->val < op2.mini) cur_isbst = true;
        
        temp obj;
        obj.maxi = cur_maxi;
        obj.mini = cur_mini;
        obj.isbst= cur_isbst;
        
        return obj;
    }
    bool isValidBST(TreeNode* root) {
        
        if(root== NULL)
            return true;
        
        temp ans = helper(root);
        return ans.isbst;
    }
};