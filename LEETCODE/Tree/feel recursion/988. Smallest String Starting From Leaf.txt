/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> ans;
    
    char convert(int n){
        return (n+'a');
    }
    
    void help(TreeNode *root,vector<int> temp){
        temp.push_back(root->val);
        if(!root->left && !root->right){
            reverse(temp.begin(),temp.end());
            ans.push_back(temp);
            reverse(temp.begin(),temp.end());
            return;
        }
        
        if(root->left){
            help(root->left,temp);
        }
        
        if(root->right){
            help(root->right,temp);
        }
        
        return;
    }
    
    string smallestFromLeaf(TreeNode* root) {
        
        if(!root) return "";
        vector<int> temp;
        help(root,temp);
        set<string> set;
        
        for(int i=0;i<ans.size();i++){
            string s="";
            for(int j=0;j<ans[i].size();j++){
                // cout<<ans[i][j]<<" ";
                s+=convert(ans[i][j]);
            }
            // cout<<"\n";
            set.insert(s);
        }
        
        auto s_ans= *(set.begin());
        return s_ans;
    }
};