/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int count =0;
    bool help(vector<int> &v){
        unordered_map<int,int> m;
        
        for(int i=0;i<v.size();i++){
            // cout<<v[i]<<" ";
            m[v[i]]++;
        }
        // cout<<"\n";
        int count_even=0;int count_odd=0;
        for(auto it:m){
            if(it.second%2==0)
                count_even++;
            else
                count_odd++;
        }
        
        if(v.size()%2==0){
            if(count_odd!=0)
                return false;
        }
        else{
            if(count_odd!=1)
                return false;
        }
        
        return true;
    }
    
    void dfs(TreeNode* root , vector<int> &v){
        if(root == NULL)
            return;
        
        v.push_back(root->val);
        if(root->left==NULL && root->right==NULL){
            if(help(v))
                count++;
            return;
        }
        
        if(root->left){
            dfs(root->left,v);
            v.pop_back();
        }

        if(root->right){
            dfs(root->right,v);
            v.pop_back();
        }
        
        return;
    }
    
    int pseudoPalindromicPaths (TreeNode* root) {
        
        vector<int> v;
        dfs(root,v);
        return count;
    }
};