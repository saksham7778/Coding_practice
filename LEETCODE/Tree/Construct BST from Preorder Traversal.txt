/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* help(vector<int>& preorder, int start , int end){
        if(start >= end)
            return NULL;
        int root_number = preorder[start];
        TreeNode *root = new TreeNode(root_number);
        // cout<<root_number<<"\n";
        int i = start+1;
        while(i<=preorder.size()-1 && preorder[i] < root_number){
            i++;
        }
        
        root->left =help(preorder,start+1,i);
        root->right=help(preorder,i,end);
        
        return root;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
        if(preorder.size()==0)
            return NULL;
        return help(preorder,0,preorder.size());
    }
};