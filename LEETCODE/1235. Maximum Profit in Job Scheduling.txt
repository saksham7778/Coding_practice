class Solution {
public:
    class jobs{
      public:
        int start;int finish;int profit;
    };
    
    struct compare{
      bool operator()(const jobs &j1,const jobs &j2){
          return j1.finish<j2.finish;
      }  
    };
    
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n =startTime.size();
        jobs ar[n];
        
        for(int i=0;i<n;i++){
            jobs obj;
            obj.start=startTime[i];obj.finish=endTime[i];obj.profit=profit[i];
            ar[i]=obj;
        }
        
        sort(ar,ar+n,compare());
        
        // for(int i=0;i<n;i++){
        //     cout<<ar[i].start<<" "<<ar[i].finish<<" "<<ar[i].profit<<"\n";
        // }
        
        int dp[n];dp[0]=ar[0].profit;
        for(int i=1;i<n;i++){
            dp[i]=ar[i].profit;
            int num=0;
            for(int j=i-1;j>=0;j--){
                if(ar[j].finish<=ar[i].start){
                    num=dp[j];
                    break;
                }
            }
            dp[i]=max(dp[i-1],dp[i]+num);
        }
        return dp[n-1];
    }
};