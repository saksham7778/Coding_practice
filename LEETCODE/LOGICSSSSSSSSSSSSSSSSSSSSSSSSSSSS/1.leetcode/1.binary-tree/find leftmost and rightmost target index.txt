// leftmost index
int help1(vector<int>& v, int k){
        
	int n = v.size();
	int l =0;
	int r =n-1;
	while(l<r){
		int mid = l+(r-l)/2;
		if(v[mid]==k)
			r=mid;
		else if(v[mid]<k)
			l=mid+1;
		else
			r=mid-1;
	}
	if(v[l]!=k) return -1;
	else return l;
}
    
// rightmost index
int help2(vector<int>& v, int k,int l,int r){

	int n = v.size();
	int l =0;
	int r =n-1;        

	while(l<r){
		int mid = l+(r-l)/2 +1; // added 1 to make it right biased
		if(v[mid]==k)
			l=mid;
		else if(v[mid]<k)
			l=mid+1;
		else
			r=mid-1;
	}
	if(v[l]!=k) return -1;
	else return l;
}
