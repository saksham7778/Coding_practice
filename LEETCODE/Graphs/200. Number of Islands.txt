class Solution {
public:

    int dx[4]={1,0,-1,0};
    int dy[4]={0,1,0,-1};
    bool isValid(int row,int col,int n,int m,vector<vector<int>> &visited,vector<vector<char>> &grid){
        if(row<0 || row>=n || col<0|| col>=m || visited[row][col]==1 || grid[row][col]=='0') return false;
        return true;
    }
        
    void dfs(vector<vector<char>> &grid,vector<vector<int>> &visited,int n,int m,int row,int col){
        visited[row][col]=1;
    
        for(int i=0;i<4;i++){
            int new_row=row+dx[i];int new_col=col+dy[i];
            if(isValid(new_row,new_col,n, m,visited,grid))
                dfs(grid,visited,n,m,new_row,new_col);
        }
        return;
    }
 
    int numIslands(vector<vector<char>>& grid) {
        
        int n=grid.size();
        if(n==0) return 0;int m=grid[0].size();
        
        vector<vector<int>> visited(n,vector<int>(m,0));
        // print(visited,n,m);cout<<"\n\n";
        int count =0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && visited[i][j]==0){
                    count++;
                    dfs(grid,visited,n,m,i,j);
                    // print(visited,n,m);cout<<"\n\n";
                }
            }
        }
        
        return count;
    }
};