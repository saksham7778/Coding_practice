class Solution {
public:
    
    void dfs(vector<vector<int>>& rooms , bool *visited,int sv){
        visited[sv]=1;
        
        for(int i=0;i<rooms[sv].size();i++){
            int num = rooms[sv][i];
            if(!visited[num]){
                dfs(rooms,visited,num);
            }
        }
        return;
    }
    
    void bfs(vector<vector<int>>& rooms , bool *visited,int sv){
        queue<int> q;
        q.push(sv);visited[sv]=1;
        
        while(!q.empty()){
            int front = q.front();
            q.pop();
            for(int i=0;i<rooms[front].size();i++){
                int num = rooms[front][i];
                if(!visited[num]){
                    q.push(num);
                    visited[num]=1;
                }
            }
        }
        return;
    }
    
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        
        int n = rooms.size();
        
        bool visited[n];
        for(int i=0;i<n;i++) visited[i]=false;
        
        // dfs(rooms,visited,0);
           bfs(rooms,visited,0);
        
        int count =0;
        for(int i=0;i<n;i++){
            if(visited[i]==1)
                count++;
        }        
        if(count==n) return true;
        else return false;
    }
};