class Solution {
public:
    void bfs(int N, vector<vector<int>>& dislikes,vector<vector<int>>& graph,int sv,bool &flag,int *visited ){
        queue<int> q;
        q.push(sv); visited[sv]=1;
        
        while(!q.empty()){
            int front = q.front();
            q.pop();
            
            for(int i=0;i<graph[front].size();i++){
                int cur = graph[front][i];
                if(front == cur) continue;
                if(visited[front] == visited[cur])
                    flag = true;
                
                if(visited[cur]==0){
                    q.push(cur);
                    if(visited[front]  == 1) visited[cur]=2;
                    else visited[cur]=1;
                }
            }
        }
        
    }
    
    bool helper(int N, vector<vector<int>>& dislikes,vector<vector<int>> &graph ){
        
        
        int visited[N+1]; for(int i=0;i<=N;i++) visited[i]=0;
        bool flag = false;
        for(int i=1;i<=N;i++){
            if(visited[i]==0){
                bfs(N,dislikes,graph,i,flag,visited);
                if(flag)
                    return false;
            }
        }
        
        return true;
    }
    
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        
        int n = dislikes.size();
        vector<vector<int>> graph(N+1);
        
        for(int i=0;i<n;i++){
            graph[dislikes[i][0]].push_back(dislikes[i][1]);
            graph[dislikes[i][1]].push_back(dislikes[i][0]);
        }
        
        return helper(N,dislikes,graph);
        
        
    }
};