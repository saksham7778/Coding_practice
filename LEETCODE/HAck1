// C++ implementation of the approach 
#include <bits/stdc++.h> 
using namespace std; 

// Node of the binary tree 
struct node { 
	int data; 
	node* left; 
	node* right; 
	node(int data) 
	{ 
		this->data = data; 
		left = NULL; 
		right = NULL; 
	} 
}; 

// Function that returns true if a pair 
// with given sum exists in the given BSTs 
bool existsPair(node* root1, node* root2, int x) 
{ 
	// Stack to store nodes for forward and backward 
	// iterator 
	stack<node *> it1, it2; 

	// Initializing forward iterator 
	node* c = root1; 
	while (c != NULL) 
		it1.push(c), c = c->left; 

	// Initializing backward iterator 
	c = root2; 
	while (c != NULL) 
		it2.push(c), c = c->right; 

	// Two pointer technique 
	while (it1.size() and it2.size()) { 

		// To store the value of the nodes 
		// current iterators are pointing to 
		int v1 = it1.top()->data, v2 = it2.top()->data; 

		// If found a valid pair 
		if (v1 + v2 == x) 
			return true; 

		// Moving forward iterator 
		if (v1 + v2 < x) { 
			c = it1.top()->right; 
			it1.pop(); 
			while (c != NULL) 
				it1.push(c), c = c->left; 
		} 

		// Moving backward iterator 
		else { 
			c = it2.top()->left; 
			it2.pop(); 
			while (c != NULL) 
				it2.push(c), c = c->right; 
		} 
	} 

	// If no such pair found 
	return false; 
} 

// Driver code 
int main() 
{ 

	// First BST 
	node* root1 = new node(11); 
	root1->right = new node(15); 

	// Second BST 
	node* root2 = new node(5); 
	root2->left = new node(3); 
	root2->right = new node(7); 
	root2->left->left = new node(2); 
	root2->left->right = new node(4); 
	root2->right->left = new node(6); 
	root2->right->right = new node(8); 

	int x = 23; 

	if (existsPair(root1, root2, x)) 
		cout << "Yes"; 
	else
		cout << "No"; 

	return 0; 
} 
