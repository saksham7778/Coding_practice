#include<bits/stdc++.h>

using namespace std;

void buildTree(int *a,int *tree,int start,int end,int treeIndex){
	
	int mid=(start+end)/2;
	
	if(start==end){
		tree[treeIndex]=a[start];
		return;
	}
	
	buildTree(a,tree,start,mid,2*treeIndex);
	buildTree(a,tree,mid+1,end,2*treeIndex+1);
	
	tree[treeIndex]=tree[2*treeIndex]+tree[2*treeIndex+1];
}


void updateTree(int *a,int *tree,int start,int end,int treeIndex,int index,int value){
	
	int mid=(start+end)/2;
	
	if(start == end){
		a[index]=value;
		tree[treeIndex]=value;
		return ;
	}
	
	if(index<=mid){
		updateTree(a,tree,start,mid,2*treeIndex,index,value);
	}else{
		updateTree(a,tree,mid+1,end,2*treeIndex+1,index,value);		
	}
	
	tree[treeIndex]=tree[2*treeIndex]+tree[2*treeIndex+1];
	
}


int querry(int *tree,int start , int end , int left , int right , int treeIndex){
	
//	cout<<start<<"	"<<end<<"	"<<left<<"	"<<right<<"	"<<treeIndex<<endl;
	//completely outside
	if(start>right || end<left) {
		return 0;
	}
	
	//completely inside
	
	if(start>=left && end<=right	){
//		cout<<tree[treeIndex]<<" 	hello 		"<<endl;
		return tree[treeIndex];
	}
	
	//partially inside/outside
	int mid=(start+end)/2;
	
	int ans1=querry(tree,start,mid,left,right,2*treeIndex);
	int ans2=querry(tree,mid+1,end,left,right,2*treeIndex+1);
	
	return ans1+ans2;
}


int main(){
	
	int n;
	cin>>n;
	
	int a[n];
	int tree[4*n]={0};   ////////////  WE HAVE TAKEN TREE SIZE 4*N WHICH IS MAX AND VALUES CANT ECEED BEYOND THIS NUMBER  /////////////////////
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	
	buildTree(a,tree,0,n-1,1);
	
	cout<<"BUILD TREE IS"<<"\n";
	for(int i=1;i<4*n;i++){
		cout<<tree[i]<<"\n";
	}
	
	cout<<"\n"<<"\n";
	
	updateTree(a,tree,0,n-1,1,2,10);
	
	cout<<"UPDATED TREE IS"<<"\n";
	for(int i=1;i<4*n;i++){
		cout<<tree[i]<<"\n";
	}
	cout<<endl<<endl;
	
	int ans=querry(tree,0,n-1,2,4,1);
	cout<<ans;
}