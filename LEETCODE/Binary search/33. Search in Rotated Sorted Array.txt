class Solution {
public:
    
    int binary_search(vector<int> &ar,int start,int end,int x){
        
        while(start<=end){
            
            int mid = start + (end-start)/2;
            if(ar[mid] == x)
                return mid;
            else if(x < ar[mid])
                end = mid-1;
            else
                start = mid+1;
        }
        return -1;
    }
    
    int findMin(vector<int>& ar) {
        
        int n = ar.size();
        int start = 0;
        int end   = n-1;
        
        while(start<=end){
            int mid = start + (end-start)/2;
            int next = (mid+1)%n;
            int prev = (mid -1 + n)%n;
            
            if(ar[start]<ar[end]) return start;
            
            else if(ar[mid] <= ar[next] && ar[mid] <= ar[prev])
                return mid;
            else if(ar[start] <= ar[mid])
                start = mid+1;
            else if(ar[mid] <= ar[end])
                end = mid -1 ;
        }
        
        return -1;
    }
    
    
    int search(vector<int>& nums, int target) {
        
        int index = findMin(nums);
        int n = nums.size();    if(n==0) return -1;
        int first = binary_search(nums,0,index-1,target);
        int second =binary_search(nums,index,n-1,target);
        
        return max(first,second);
    }
};