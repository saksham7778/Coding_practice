class Solution {
public:
    int minDistance(string word1, string word2) {
        
        int n1 = word1.length();
        int n2 = word2.length();
        
        int dp[n1+1][n2+1];
        
        for(int i=0;i<=n1;i++)
            dp[i][0] = i;
        
        for(int i=0;i<=n2;i++)
            dp[0][i] = i;
        
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                
                if(word1[i-1]==word2[j-1])
                    dp[i][j]=dp[i-1][j-1];
                else
                    dp[i][j] = 1+min( dp[i-1][j], min(dp[i-1][j-1],dp[i][j-1]) );
            }
        }
        
        return dp[n1][n2];
    }
};


######################################################################################################################################
class Solution {
public:
    int help(string s1,int n1,string s2,int n2,int **dp){
        
        if(n1==0) return n2;
        if(n2==0) return n1;
        if(dp[n1][n2]!=-1) return dp[n1][n2];
        
        int ans =0;
        if(s1[0]==s2[0])
            ans = help(s1.substr(1),n1-1,s2.substr(1),n2-1,dp);
        else{
            int op1= 1+help(s1,n1,s2.substr(1),n2-1,dp);
            int op2= 1+help(s1.substr(1),n1-1,s2,n2,dp);
            int op3= 1+help(s1.substr(1),n1-1,s2.substr(1),n2-1,dp);
            
            ans = min(op1,min(op2,op3));
        }
        dp[n1][n2] = ans;
        return ans;
    }
    
    int minDistance(string word1, string word2) {
        
        int n1 = word1.length();
        int n2 = word2.length();
        
        int **dp=new int*[n1+1];
        for(int i=0;i<=n1;i++){
            dp[i]=new int[n2+1];
            for(int j=0;j<=n2;j++){
                dp[i][j]=-1;
            }
        }
        
        return help(word1,n1,word2,n2,dp);
    }
};