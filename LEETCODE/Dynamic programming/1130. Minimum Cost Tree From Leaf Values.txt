class Solution {
public:
    int dp[42][42];
    int help(vector<int>& ar,int i,int j){
        if(i>=j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        int ans = INT_MAX;
        
        for(int k=i;k<=j-1;k++){
            int temp_ans = help(ar,i,k) + help(ar,k+1,j);
            
            int max_left , max_right;
            max_left = 0;max_right = 0;
            for(int temp = i;temp<=k;temp++){
                max_left = max(max_left,ar[temp]);
            }
            
            for(int temp = k+1;temp<=j;temp++){
                max_right = max(max_right,ar[temp]);
            }
            
            temp_ans += (max_left*max_right);
            
            ans = min(ans,temp_ans);
        }
        dp[i][j] = ans;
        return ans;
    }
    
    int mctFromLeafValues(vector<int>& ar) {
        
        memset(dp,-1,sizeof(dp));
        int n = ar.size();
        return help(ar,0,n-1);
    }
};