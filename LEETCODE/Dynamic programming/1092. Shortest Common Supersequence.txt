class Solution {
public:
    int dp[1005][1005];
    
    void print(int n,int m){
        for(int i=0;i<=n;i++){
            for(int j=0;j<=m;j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<"\n";
        }
        return;
    }
    
    string help(int n,int m,string x,string y){
        int i=n;int j=m;
        string s="";
        while(i>0 && j>0){
            if(x[i-1]==y[j-1]){
                s.push_back(x[i-1]);
                i--;j--;
            }
            else if(dp[i][j-1]>=dp[i-1][j]){
                s.push_back(y[j-1]);
                j--;
            }
            else if(dp[i-1][j] > dp[i][j-1]){
                s.push_back(x[i-1]);
                i--;
            }
        }
        
        while(i>0){
            s.push_back(x[i-1]);
            i--;
        }
        
        while(j>0){
            s.push_back(y[j-1]);
            j--;
        }
        
        reverse(s.begin(),s.end());
        
        return s;
    }
    
    string shortestCommonSupersequence(string str1, string str2) {
        
        int n = str1.length();
        int m = str2.length();
        
        
        memset(dp,0,sizeof(dp));
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(str1[i-1] == str2[j-1]){
                    dp[i][j] = 1+dp[i-1][j-1];
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        
        // print(n,m);
        return help(n,m,str1,str2);        
    }
};	