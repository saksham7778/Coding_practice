class Solution {
public:
    
     void make_right(vector<int> &ar,stack<pair<int,int>> &s,vector<int> &v){
        
        int last = ar.size();
        for(int i=ar.size()-1;i>=0;i--){
            
            if(s.empty()){
                v.push_back(last);
            }
            else if(s.top().first < ar[i]){
                v.push_back(s.top().second);
            }
            else if(ar[i] <= s.top().first){
                while(!s.empty() && (ar[i] <= s.top().first)){
                    s.pop();
                }
                
                if(s.empty()){
                    v.push_back(last);
                }
                else{
                    v.push_back(s.top().second); 
                }   
            }
            
            s.push({ar[i],i});
        }
        reverse(v.begin(),v.end());       
    }
    
     void make_left(vector<int> &ar,stack<pair<int,int>> &s,vector<int> &v){
        
        for(int i=0;i<ar.size();i++){
            
            if(s.empty()){
                v.push_back(-1);
            }
            else if(s.top().first < ar[i]){
                v.push_back(s.top().second);
            }
            else if(ar[i] <= s.top().first){
                while(!s.empty() && (ar[i] <= s.top().first)){
                    s.pop();
                }
                
                if(s.empty()){
                    v.push_back(-1);
                }
                else{
                    v.push_back(s.top().second); 
                }   
            }
            
            s.push({ar[i],i});
        }
                
     }
    
    
    int largestRectangleArea(vector<int>& ar) {
        
        //pair<element , index>
        stack<pair<int,int>> s;
        vector<int> left;vector<int> right;
        make_left(ar,s,left);
        
        // s.empty();
        stack<pair<int,int>> st;
        make_right(ar,st,right);
        
//         for(int i:left){
//             cout<<i<<" ";
//         }cout<<"\n";
        
//         for(int i:right){
//             cout<<i<<" ";
//         }cout<<"\n";
        
        int ans = INT_MIN;
        for(int i=0;i<ar.size();i++){
            right[i] = (right[i]-left[i]-1)*ar[i];
            ans = max(ans,right[i]);
        }
        
        return ans;
    }
    
    int maximalRectangle(vector<vector<char>>& ar) {
        
        if(ar.size()==0) return 0;
        
        int n = ar.size();
        int m = ar[0].size();
        vector<int> v(m,0);
        int ans =0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(ar[i][j]=='0'){
                    v[j] = 0;
                }
                else{
                    v[j] += 1;
                }
            }
            int temp_ans = largestRectangleArea(v);
            ans = max(ans,temp_ans);
            // for(int i=0;i<m;i++) cout<<v[i]<<" ";cout<<"\n";
        }
        return ans;
    }
};