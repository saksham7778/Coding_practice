/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    
    struct cmp{
      bool operator()(const pair<int,int> &p1 , const pair<int,int> &p2){
          if(p1.first==p2.first) return p1.second<p2.second;
          return p1.first<p2.first;
      }  
    };
    
    class to{
      public:
        int row;int col;
        TreeNode* node;
    };
    
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        vector<vector<int>> ans;
        vector<int> temp;
        
        queue<to> q;
        to t;t.row=0;t.col=0;t.node=root; q.push(t);
        
        map<int,vector<pair<int,int>>> m;    
        while(!q.empty()){
        
            to fr = q.front();q.pop();
            // cout<<fr.first->val<<" *";
            
            m[fr.col].push_back({fr.row,fr.node->val});
            
            // m[fr.second].push_back(fr.first->val);

            if(fr.node->left){
                to t;t.row=fr.row+1; t.col=fr.col-1; t.node=fr.node->left; q.push(t);
                // q.push({fr.node->left , fr.col-1});
            }

            if(fr.node->right){
                to t;t.row=fr.row+1; t.col=fr.col+1; t.node=fr.node->right; q.push(t);
                // q.push({fr.node->right , fr.col+1});
            }
           
        }
        
        for(auto it=m.begin();it!=m.end();it++){
            int size = it->second.size();
            sort(it->second.begin(),it->second.end(),cmp());
            for(int j=0;j<size;j++){
                temp.push_back(it->second[j].second);
            }
            ans.push_back(temp);
            temp.clear();
        }
        
        return ans;
    }
};