#include<bits/stdc++.h>
using namespace std;
#define N 9
bool isempty(int a[N][N] ,int &row, int &col ){
	
	for(int i=0;i<N;i++){
		for(int j=0;j<N;j++){
			if(a[i][j]==0){
				row=i;
				col=j;
				return true;
			}
		}
	}
	return false;
}

bool isSafeRow(int a[N][N] , int row , int num){
	
	for(int i=0;i<N;i++){
		if(a[row][i]==num){
			return false;
		}
	}
	
	return true;
}

bool isSafeCol(int a[N][N] , int col , int num){

	for(int i=0;i<N;i++){
		if(a[i][col]==num){
			return false;
		}
	}
	
	return true;
}

bool isSafeGrid(int a[N][N] , int row ,int col , int num){
	
	int rowFactor=row-(row%3);
	int colFactor=col-(col%3);
	for(int i=0;i<3;i++){
		for(int j=0;j<3;j++){
			if(a[i+rowFactor][j+colFactor]==num){
				return false;
			}
		}
	}
	return true;
}

bool isSafe(int a[N][N] , int row ,int col , int num){
	
	if( isSafeRow(a,row,num) && isSafeCol(a,col,num)  && isSafeGrid(a,row,col,num) ) {
		return true;
	}
	return false;
}

bool help(int ar[N][N] , int row , int col){
    if(row == N) return true;
    if(col == N) return help(ar,row+1,0);
    
    if(ar[row][col]!=0) return help(ar,row,col+1);
    
    for(int i=1;i<=9;i++){
        if(isSafe(ar,row,col,i)){
            ar[row][col]=i;
            if(help(ar,row,col+1)) return true;
            ar[row][col] = 0;
        }
    }
    return false;
}

bool sudokuSolver(int a[N][N]){
	return help(a,0,0);
}








