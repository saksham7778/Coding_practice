/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* help(vector<int>& preorder, vector<int>& inorder,int inS,int inE,int preS,int preE){
        if(inS>inE || preS>preE) return NULL;
        
        TreeNode *root = new TreeNode(preorder[preS]);
        
        int index=-1;
        for(int i=inS;i<=inE;i++){
            if(inorder[i]==preorder[preS]){
                index=i;
                break;
            }
        }
        int linS = inS;
        int linE = index-1;
        int lpreS = preS+1;
        int lpreE = linE-linS+lpreS;
        
        int rinS = index+1;;
        int rinE = inE;
        int rpreS = lpreE+1;
        int rpreE = preE;        
        
        root->left = help(preorder,inorder,linS,linE,lpreS,lpreE);
        root->right= help(preorder,inorder,rinS,rinE,rpreS,rpreE);
        
        return root;

    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        if(n==0) return NULL;
        
        return help(preorder,inorder,0,n-1,0,n-1);
    }
};