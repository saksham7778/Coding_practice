int help(string s,string t,int n,int m,vector<vector<int>> &dp){
    
    if(m==0) return 1;
    if(n==0) return 0;
    
    if(dp[n][m]!=-1) return dp[n][m];
    int ans;
    if(s[n-1]!=t[m-1]){
        ans= help(s,t,n-1,m,dp);
    }
    else{
        int op1 = help(s,t,n-1,m,dp);
        int op2 = help(s,t,n-1,m-1,dp);
        ans= op1+op2;
    }
    dp[n][m]=ans;
    return ans;
}

int Solution::numDistinct(string s, string t) {
    if(s==t) return 1;
    int n = s.length();int m = t.length();
    vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
    return help(s,t,n,m,dp);
}
